---
- name: Wait for Kubernetes Nodes
  hosts: localhost
  gather_facts: False
  any_errors_fatal: "true"
  roles:
    - { role: infra/wait-for-hosts }

- name: Set timezone
  hosts: all
  become: yes
  tasks:
    - name: Set timezone
      community.general.timezone:
        name: Pacific/Auckland

- name: Upgrade systems
  become: yes
  hosts: all
  roles:
    - upgrade_system

- name: Set hostnames
  hosts: all
  become: yes
  tasks:
    - name: Set hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}.flexi.nesi"

- hosts: servicesnode
  become_user: root
  any_errors_fatal: "true"
  vars_files:
    - ondemand-config.yml
  roles:
    - { role: pre-checks/openstack }
    - { role: pre-checks/kubernetes }
    - { role: pre-checks/install-cert }
    - { role: kubectl }
    - { role: cluster-ctl/cli-install }
    - { role: capi-cluster/workload }
    - { role: openondemand-k8s/kuberenetes }

- name: Setup /etc/hosts
  hosts: servers
  become: yes
  gather_facts: yes
  tasks:
    - name: Add IP address of all hosts to all hosts
      lineinfile:
        dest: /etc/hosts
        line: '{{ hostvars[item]["ansible_default_ipv4"]["address"] }} {{ hostvars[item]["ansible_hostname"] }} {{ hostvars[item]["ansible_nodename"] }}'
        state: present
      with_items: "{{ groups['servers'] }}"
    - name: setup hosts ood-idp
      lineinfile:
        dest: /etc/hosts
        line: '{{ hostvars["servicesnode"]["ansible_default_ipv4"]["address"] }} ood-idp.flexi.nesi'
        state: present
    - name: setup hosts ood
      lineinfile:
        dest: /etc/hosts
        line: '{{ hostvars["webnode"]["ansible_default_ipv4"]["address"] }} ood.flexi.nesi'
        state: present

- name: Exchange SSH keys between servers
  hosts: servers
  tasks:
    - name: Generate SSH key pair
      community.crypto.openssh_keypair:
        path: ~/.ssh/id_rsa
        size: 4096
        type: rsa

    - name: Fetch the public key from the node to local
      fetch:
        src: "~/.ssh/id_rsa.pub"
        dest: "pubkeys/{{ansible_hostname}}-id_rsa.pub"
        flat: yes

    - name: Copy the key to authorized_keys
      authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ lookup('file','pubkeys/{{item}}-id_rsa.pub')}}"
      with_items:
        - "{{ groups['servers'] }}"

- name: Setup LDAP server
  become: yes
  hosts: servicesnode
  vars_files:
    - ondemand-config.yml
  roles:
    - ldap_server

- name: Setup LDAP clients
  become: yes
  hosts: servers
  vars_files:
    - ondemand-config.yml
  roles:
    - ldap_client

- name: Setup NFS server
  become: yes
  hosts: servicesnode
  vars_files:
    - ondemand-config.yml
  roles:
    - nfs_homes_server

- name: Setup NFS clients
  become: yes
  hosts: servers
  vars_files:
    - ondemand-config.yml
  roles:
    - nfs_homes_client

- name: Add users
  become: yes
  hosts: servicesnode
  vars_files:
    - ondemand-config.yml
  roles:
    - ldap_add_users

- name: Setup keycloak
  become: yes
  hosts: servicesnode
  vars_files:
    - ondemand-config.yml
  roles:
    - keycloak

# create ssl cert
- name: Create SSL certificate for ondemand
  become: yes
  hosts: webnode
  vars_files:
    - ondemand-config.yml
  roles:
    - { role: pre-checks/install-cert }
  tasks:
    - name: Create directories for OpenSSL certificate
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
      loop:
        - /etc/ssl/private
        - /etc/ssl/crt
        - /etc/ssl/csr

    # - name: Creating rdc-CA.key with ca_key_content content
    #   copy:
    #     dest: "{{ ca_file_path }}/rdc-CA.key"
    #     content: "{{ ca_key_content }}"
    #   become: true

    # - name: Creating rdc-CA.crt with ca_cert_content content
    #   copy:
    #     dest: "{{ ca_file_path }}/rdc-CA.crt"
    #     content: "{{ ca_cert_content }}"
    #   become: true

    # - name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
    #   community.crypto.openssl_privatekey:
    #     path: /etc/ssl/private/apache-ood.key

    # - name: Generate an OpenSSL Certificate Signing Request
    #   community.crypto.openssl_csr:
    #     path: /etc/ssl/csr/apache-ood.csr
    #     privatekey_path: /etc/ssl/private/apache-ood.key
    #     common_name: "{{ servername }}"

    # - name: Generate a Self Signed OpenSSL certificate
    #   community.crypto.x509_certificate:
    #     path: /etc/ssl/crt/apache-ood.crt
    #     privatekey_path: /etc/ssl/private/apache-ood.key
    #     csr_path: /etc/ssl/csr/apache-ood.csr
    #     ownca_path: "{{ rdc_certificate_path }}"
    #     ownca_privatekey_path: "{{ rdc_private_key_path }}"
    #     ownca_privatekey_passphrase : "{{ rdc_ca_passphrase }}"
    #     provider: ownca

- name: Install Apptainer
  become: yes
  hosts: webnode
  roles:
    - apptainer

# run ondemand role
- name: Install ondemand
  become: yes
  hosts: webnode
  vars_files:
    - ondemand-config.yml
  pre_tasks:
    - name: Get keycloak client secret
      community.general.keycloak_clientsecret_info:
        client_id: ondemand.flexi
        realm: ondemand
        auth_client_id: admin-cli
        auth_keycloak_url: "https://{{ oidc_hostname }}"
        auth_realm: master
        auth_username: admin
        auth_password: "{{ keycloak_admin_password }}"
        validate_certs: false
      register: keycloak_secret
#      no_log: true
    - name: Set keycloak client secret fact for ondemand
      set_fact:
        oidc_client_secret: "{{ keycloak_secret.clientsecret_info.value }}"
      no_log: true
  roles:
    - osc.open_ondemand

- name: Post ondemand setup
  hosts: webnode
  become: yes
  vars_files:
    - ondemand-config.yml
  pre_tasks:
    - name: Install dependencies for interactive apps
      apt:
        name:
          - ncat
          - websockify
        state: present
  roles:
    - { role: kubectl }
    - { role: openondemand-k8s/web-node }
